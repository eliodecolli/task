{"version":3,"sources":["webpack://task/./components/base/baseTextInput.ts","webpack://task/./components/calcInput.ts","webpack://task/./components/numericInput.ts","webpack://task/./core/ast/node.ts","webpack://task/./core/ast/operators.ts","webpack://task/./core/eventsManager.ts","webpack://task/./core/expressionEvaluator.ts","webpack://task/./core/parser.ts","webpack://task/./core/tokenizer.ts","webpack://task/./typescript/index.ts","webpack://task/webpack/bootstrap","webpack://task/webpack/startup"],"names":[],"mappings":"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","file":"task_components.js","sourcesContent":["/*\r\n    File Name:\r\n        baseTextInput.ts\r\n    \r\n    Purpose:\r\n        Contains the base interface from which numeric controls can be derived.\r\n*/\r\n\r\nimport {IEventManager, EventManagerWrapper} from '../../core/eventsManager'\r\n\r\n\r\ninterface ITextInput {\r\n    value: number | null | undefined;\r\n    text: string;\r\n    isValid: boolean;\r\n    hostElement: HTMLElement;\r\n}\r\n\r\n\r\nabstract class BaseTextInput implements ITextInput {\r\n    protected _text: string;\r\n    protected _value: number | null | undefined;\r\n\r\n    protected _isValid: boolean;\r\n\r\n    protected _hostElement: HTMLElement;\r\n    protected _inputElement: HTMLElement | undefined;\r\n\r\n    protected textChangedEvents: IEventManager<ITextInput> | null = null;\r\n    protected valueChangedEvents: IEventManager<ITextInput> | null = null;\r\n    protected validityChangedEvents: IEventManager<ITextInput> | null = null;\r\n\r\n    protected _textChangedWrapper: EventManagerWrapper<ITextInput> | null;\r\n    protected _valueChangedWrapper: EventManagerWrapper<ITextInput> | null;\r\n    protected _validityChangedWrapper: EventManagerWrapper<ITextInput> | null;\r\n\r\n    public get textChanged(): EventManagerWrapper<ITextInput> | null {\r\n        return this._textChangedWrapper;\r\n    }\r\n\r\n    public get valueChanged(): EventManagerWrapper<ITextInput> | null {\r\n        return this._valueChangedWrapper;\r\n    }\r\n\r\n    public get validityChanged(): EventManagerWrapper<ITextInput> |null {\r\n        return this._validityChangedWrapper;\r\n    }\r\n\r\n    public get isValid(): boolean {\r\n        return this._isValid;\r\n    }\r\n\r\n    public get hostElement(): HTMLElement {\r\n        return this._hostElement;\r\n    }\r\n\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public get value(): number | null | undefined {\r\n        return this._value;\r\n    }\r\n\r\n    public set text(_val: string) {\r\n        if(this._text !== _val) {\r\n            let c = this._inputElement?.querySelector(\"input\") as HTMLInputElement;\r\n            if(c) {\r\n                c.value = _val;\r\n            }\r\n            this._inputElement?.querySelector('input')?.dispatchEvent(new Event('input'));    // this will trigger, evaluate(), however there's perhaps a better way to do this?\r\n        }\r\n    }\r\n\r\n    public set value(_val: number | null | undefined) {\r\n        if(this._value !== _val) {\r\n            if(_val !== null && _val !== undefined) {\r\n                this.text = _val.toString();  // this will trigger re-evaluation which in turn will dictate the result\r\n            }\r\n            else {\r\n                this._value = undefined;\r\n                this._text = '';\r\n                if(this._isValid) {\r\n                    this._isValid = false;\r\n                    this.validityChangedEvents?.signal();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    constructor(hostElement: HTMLElement) {\r\n        if(hostElement.childNodes.length > 0 ||\r\n            hostElement.tagName !== \"DIV\") {\r\n                throw new Error(\"Host element must be an empty DIV.\");\r\n        }\r\n\r\n        this._hostElement = hostElement;\r\n        this._isValid = true;\r\n        this._value = null;\r\n        this._text = '';\r\n        this._inputElement = this.createInputElement();\r\n\r\n        this._hostElement.appendChild(this._inputElement);\r\n\r\n        this._validityChangedWrapper = null;\r\n        this._textChangedWrapper = null;\r\n        this._valueChangedWrapper = null;\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.textChangedEvents?.clear();\r\n        this.valueChangedEvents?.clear();\r\n        this.validityChangedEvents?.clear();\r\n\r\n        this._inputElement?.remove();\r\n    }\r\n\r\n    protected abstract evaluate(): void;\r\n\r\n    protected createInputElement(): HTMLElement {\r\n        let retval = document.createElement('div');\r\n\r\n        let input = document.createElement('input');\r\n        input.setAttribute('type', 'text');\r\n\r\n        input.addEventListener('input', x => {\r\n            let target = x.target as HTMLInputElement;\r\n            if(target.value !== this._text) {\r\n                let tempVal = this._value;\r\n                let tempValidity = this._isValid;\r\n\r\n                this._text = target.value;\r\n                this.evaluate();\r\n                \r\n                if(tempValidity !== this._isValid) {\r\n                    this.validityChangedEvents?.signal();\r\n                }\r\n                if(tempVal !== this._value) {\r\n                    this.valueChangedEvents?.signal();\r\n                }\r\n                this.textChangedEvents?.signal();   // we already determined that the text has changed\r\n            }\r\n        });\r\n        \r\n        retval.appendChild(input);\r\n        return retval;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {ITextInput, BaseTextInput};","/*\r\n    File Name:\r\n        calcInput.ts\r\n    \r\n    Purpose:\r\n        Provides the logic to extend the BaseTextInput element as an expression evaluator.\r\n*/\r\n\r\nimport ExpressionEvaluator from '../core/expressionEvaluator';\r\nimport {ITextInput, BaseTextInput} from './base/baseTextInput';\r\nimport {EventManager, EventManagerWrapper} from '../core/eventsManager'\r\n\r\n\r\nclass CalculatorInput extends BaseTextInput {\r\n    \r\n    constructor(hostElement: HTMLElement) {\r\n        super(hostElement);\r\n        \r\n        this.textChangedEvents = new EventManager<ITextInput>(this);\r\n        this.valueChangedEvents = new EventManager<ITextInput>(this);\r\n        this.validityChangedEvents = new EventManager<ITextInput>(this);\r\n\r\n        this._textChangedWrapper = new EventManagerWrapper<ITextInput>(this.textChangedEvents);\r\n        this._valueChangedWrapper = new EventManagerWrapper<ITextInput>(this.valueChangedEvents);\r\n        this._validityChangedWrapper = new EventManagerWrapper<ITextInput>(this.validityChangedEvents);\r\n    }\r\n\r\n    protected createInputElement(): HTMLElement {\r\n        let retval = super.createInputElement();\r\n\r\n        let inputElement = retval.firstChild as HTMLInputElement;\r\n        inputElement.setAttribute('type', 'text');\r\n        inputElement.setAttribute('class', 'calc-input');\r\n\r\n        let innerSpan = document.createElement('span');\r\n        innerSpan.setAttribute('class', 'calc-result');\r\n\r\n        retval.appendChild(innerSpan);\r\n        retval.classList.add('calc-valid');\r\n\r\n        return retval;\r\n    }\r\n\r\n    protected evaluate(): void {\r\n        if(this._text.length > 0) {\r\n            let expEvaluator = new ExpressionEvaluator();\r\n            let computed = expEvaluator.evaluate(this._text);\r\n\r\n            let resultSpan = this._inputElement?.querySelector(\"span\") as HTMLSpanElement;\r\n            \r\n            if(computed != undefined) {\r\n                this._value = computed;\r\n                this._isValid = true;\r\n\r\n                resultSpan.innerText = this._value.toString();\r\n                this._inputElement?.classList.remove('calc-invalid');\r\n                this._inputElement?.classList.add('calc-valid');\r\n            }\r\n            else {\r\n                this._value = undefined;\r\n                this._isValid = false;\r\n\r\n                resultSpan.innerText = '?';\r\n                this._inputElement?.classList.add('calc-invalid');\r\n                this._inputElement?.classList.remove('calc-valid');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default CalculatorInput;","import { ITextInput, BaseTextInput } from \"./base/baseTextInput\";\r\nimport { EventManager, EventManagerWrapper } from '../core/eventsManager'\r\n\r\nclass NumericInput extends BaseTextInput {\r\n\r\n    constructor(hostElement: HTMLElement) {\r\n        super(hostElement);\r\n\r\n        this.textChangedEvents = new EventManager<ITextInput>(this);\r\n        this.valueChangedEvents = new EventManager<ITextInput>(this);\r\n        this.validityChangedEvents = new EventManager<ITextInput>(this);\r\n\r\n        this._textChangedWrapper = new EventManagerWrapper<ITextInput>(this.textChangedEvents);\r\n        this._valueChangedWrapper = new EventManagerWrapper<ITextInput>(this.valueChangedEvents);\r\n        this._validityChangedWrapper = new EventManagerWrapper<ITextInput>(this.validityChangedEvents);\r\n    }\r\n\r\n    protected evaluate(): void {\r\n        if(this._text) {\r\n            this._value = Number(this._text);\r\n            this._isValid = !isNaN(this._value);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default NumericInput;","import { TokenType } from \"../tokenizer\";\r\n\r\ninterface INode{\r\n    children: INode[];\r\n    evaluate(): number;\r\n\r\n    type: TokenType;\r\n}\r\n\r\n\r\n// default Node implementation is a variable\r\nclass Variable implements INode {\r\n    private val: number;\r\n\r\n    constructor(val: number) {\r\n        this.val = val;\r\n    }\r\n\r\n    evaluate(): number {\r\n        return this.val;\r\n    }\r\n\r\n    children: INode[] = [];\r\n\r\n    type: TokenType = TokenType.Variable;\r\n}\r\n\r\nclass Comma implements INode {\r\n    evaluate(): number {\r\n        return 0;\r\n    }\r\n\r\n    children: INode[] = [];\r\n\r\n    type: TokenType = TokenType.Comma;\r\n}\r\n\r\nexport {INode, Variable, Comma};","import {INode} from './node'\r\nimport {TokenType} from '../tokenizer'\r\n\r\nclass Operator implements INode {\r\n\r\n    evaluate(): number {\r\n        return 0;   // to be overriden\r\n    }\r\n\r\n    get priority(): number{\r\n        return 0;\r\n    }\r\n\r\n    private _tokenVal: string = \"\";\r\n\r\n    public get tokenVal(): string {\r\n        return this._tokenVal;\r\n    }\r\n\r\n    children: INode[] = [];\r\n\r\n    type: TokenType = TokenType.Operator;\r\n}\r\n\r\nclass Add extends Operator {\r\n    evaluate() : number {\r\n        return this.children[1].evaluate() + this.children[0].evaluate();\r\n    }\r\n}\r\n\r\nclass Subtract extends Operator {\r\n    public get tokenVal(): string {\r\n        return '-';\r\n    }\r\n\r\n    evaluate(): number {\r\n        return this.children[1].evaluate() - this.children[0].evaluate();\r\n    }\r\n}\r\n\r\nclass Multiply extends Operator {\r\n    evaluate(): number {\r\n        return this.children[1].evaluate() * this.children[0].evaluate();\r\n    }\r\n\r\n    get priority(): number {\r\n        return 1;\r\n    }\r\n}\r\n\r\nclass Divide extends Operator { \r\n    evaluate(): number {\r\n        return this.children[1].evaluate() / this.children[0].evaluate();\r\n    }\r\n\r\n    get priority(): number {\r\n        return 1;\r\n    }\r\n}\r\n\r\nclass LParen extends Operator {\r\n    evaluate(): number {\r\n        throw new Error(\"Cannot call evaluate() on a parenthesis.\");\r\n    }\r\n\r\n    get tokenVal(): string {\r\n        return '(';\r\n    }\r\n\r\n    get priority(): number {\r\n        return -1;\r\n    }\r\n\r\n    type = TokenType.LParen;\r\n}\r\n\r\nclass RParen extends LParen {\r\n    get tokenVal(): string {\r\n        return ')';\r\n    }\r\n\r\n    type = TokenType.RParen;\r\n}\r\n\r\nconst Operators: {[id:string]: () => Operator} = {\r\n    '+': () => new Add(),\r\n    '-': () => new Subtract(),\r\n    '*': () => new Multiply(),\r\n    '/': () => new Divide(),\r\n    '(': () => new LParen(),\r\n    ')': () => new RParen()\r\n};\r\n\r\nexport {Operator};\r\nexport default Operators;","import { ITextInput } from \"../components/base/baseTextInput\";\r\n\r\ninterface IEventManager<T> {\r\n    subscribe(func: (x: T) => void) : void;\r\n    signal(): void;\r\n    clear(): void;\r\n}\r\n\r\n\r\nclass EventManager<T> implements IEventManager<T> {\r\n    \r\n    private funcStack: ((x: T) => void)[] = [];\r\n    private ownerInstance: T;\r\n\r\n    constructor(owner: T) {\r\n        this.ownerInstance = owner;\r\n    }\r\n\r\n    clear(): void {\r\n        this.funcStack = [];\r\n    }\r\n\r\n    subscribe(func: (x: T) => void): void {\r\n        this.funcStack.push(func);\r\n    }\r\n\r\n    signal(): void {\r\n        this.funcStack.forEach(x => x(this.ownerInstance));\r\n    }\r\n}\r\n\r\n// this is to prevent other classes from calling the function signal() other than the ITextInput owner.\r\nclass EventManagerWrapper<T> {\r\n\r\n    private core: IEventManager<T>;\r\n\r\n    constructor(core: IEventManager<T>) {\r\n        this.core = core;\r\n    }\r\n\r\n    subscribe(func: (x: T) => void) {\r\n        this.core?.subscribe(func);\r\n    }\r\n\r\n}\r\n\r\nexport {IEventManager, EventManager, EventManagerWrapper};","import Parser from \"./parser\";\r\nimport { Tokenizer } from \"./tokenizer\";\r\n\r\nclass ExpressionEvaluator {\r\n\r\n    private _lastError: string | undefined;\r\n\r\n    public get lastError(): string | undefined {    // influenced by WinAPI :)\r\n        return this._lastError;\r\n    }\r\n\r\n    constructor() {\r\n        this._lastError = undefined;\r\n    }\r\n\r\n    evaluate(expression: string) : number | undefined {\r\n        try{\r\n            let tokenizer = new Tokenizer(expression);\r\n\r\n            let parser = new Parser(tokenizer.tokenize());\r\n            let expTree = parser.parse();\r\n\r\n            let retval = expTree.evaluate();\r\n            this._lastError = undefined;\r\n            return retval;\r\n        }\r\n        catch(e) {\r\n            this._lastError = e;\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ExpressionEvaluator;","/* \r\n    The idea behind the parsing phase is to organize tokens into nodes in postfix notation.\r\n    From there we can easily build an expression tree, which can be called by calling its root function \"evaluate()\".\r\n\r\n    Some of the functions here might seem a little bit weird, for instance buildStack() returns two arguments, an array of INode and a number.\r\n    The array is pretty straight-forward, but the number is used to represent the amount of tokens that have been processed.\r\n    This was used in parsing functions, but since I've dropped that functionality for the moment, that number is just hanging in there, doing nothing.\r\n*/\r\n\r\nimport {Token, TokenType} from './tokenizer'\r\nimport {default as functions} from './ast/functions'\r\nimport {default as operators, Operator} from './ast/operators'\r\nimport {INode, Variable} from './ast/node'\r\n\r\ninterface IParser {\r\n    parse(): INode;\r\n}\r\n\r\n\r\nclass Parser implements IParser {\r\n\r\n    private tokens: Token[] = [];\r\n\r\n    constructor(tokens: Token[]) {\r\n        this.tokens = tokens;\r\n\r\n        // first things first\r\n        if(this.tokens.filter(x => x.type == TokenType.LParen).length != this.tokens.filter(x => x.type == TokenType.RParen).length) {\r\n            throw new Error('Check your parenthesis.');\r\n        }\r\n    }\r\n\r\n    // recursively create an execution tree. By calling createTree(...).evaluate() we can easily evaluate the whole expression without using stack machines\r\n    private createTree(nodes: INode[]) : INode {\r\n        let item = <INode>nodes.pop();\r\n\r\n        if(item.type == TokenType.Variable || item.children.length > 0) {    // this is a variable (which indicates the last leaf of the tree) or it's already built\r\n            return item;\r\n        }\r\n\r\n        let left = this.createTree(nodes);\r\n        let right = this.createTree(nodes);\r\n\r\n        item.children.push(left, right);\r\n        return item;\r\n    }\r\n\r\n    // the following function does not work as intented, because I need to pass some more lexical phases before going into this one.\r\n    /*private parseFunction(startIndex: number, tokens: Token[], parent: INode) : [INode, number] {\r\n        let steps = startIndex;\r\n\r\n        let tokensTab: Token[] = [];\r\n\r\n        while(tokens[steps]) {\r\n            let token = tokens[steps];\r\n\r\n            if(token.type == TokenType.Comma) {\r\n                let built = this.buildStack(tokensTab);\r\n                //functionStack.push(this.createTree(built[0]));\r\n                \r\n                parent.children.push(this.createTree(built[0]));\r\n\r\n                steps += built[1];\r\n                tokensTab = [];\r\n            }\r\n            else if(token.type == TokenType.Character) {\r\n                let built = this.parseFunction(steps + 2, tokens, functions[token.value]());\r\n                parent.children.push(built[0]);\r\n                steps += built[1] + 1;\r\n            }\r\n            else if(token.type == TokenType.RParen) {\r\n                steps++;\r\n                break;\r\n            }\r\n            else {\r\n                tokensTab.push(token);\r\n                steps++;\r\n            }\r\n        }\r\n\r\n        if(tokensTab.length > 0) {\r\n            let built = this.buildStack(tokensTab);\r\n            parent.children.push(this.createTree(built[0]));\r\n            steps += built[1];\r\n        }\r\n\r\n        return [parent, steps - startIndex];\r\n    }*/\r\n\r\n    // the following is a Shunting-Yard Algorithm implementation, we use it to convert tokens into nodes and arrange them in a postfix notation (Reversed Polish Notation)\r\n    private buildStack(tokens: Token[]): [INode[], number] {\r\n        let stack: INode[] = [];\r\n        let steps = 0;\r\n\r\n        let ops: INode[] = [];\r\n\r\n        let start = 0;\r\n\r\n        for(let token of tokens) {\r\n            if(start >= tokens.length)\r\n                break;\r\n\r\n            switch(token.type) {\r\n                case TokenType.Variable: {\r\n                    stack.push(new Variable(parseFloat(token.value)));\r\n                    start++;\r\n                    break;\r\n                }\r\n\r\n                case TokenType.Operator: {\r\n                    let cOp = operators[token.value]();\r\n                    if(ops.length > 0) {\r\n                        let top = <Operator>ops[ops.length-1];\r\n\r\n                        if(top.priority >= cOp.priority && top.tokenVal !== '(') {\r\n                            stack.push(<INode>ops.pop());\r\n                        }\r\n                    }\r\n                    ops.push(cOp);\r\n                    start++;\r\n                    break;\r\n                }\r\n\r\n                case TokenType.LParen: {\r\n                    ops.push(operators['(']());\r\n                    start++;\r\n                    break;\r\n                }\r\n\r\n                case TokenType.RParen: {\r\n                    let i = ops.length - 1;\r\n                    while((<Operator>ops[i]).tokenVal !== '(') {\r\n                        stack.push(<INode>ops.pop());\r\n                        i--;\r\n                    }\r\n\r\n                    ops.pop();  // remove the last '('\r\n                    start++;\r\n                    break;\r\n                }\r\n\r\n                case TokenType.Character: {\r\n                    /*let root = functions[token.value]();\r\n                    let node = this.parseFunction(start + 2, tokens, root);\r\n\r\n                    ops.push(node[0]);\r\n                    start += node[1] + 2;\r\n                    break;*/\r\n                    throw new Error(`Invalid token \"${token.value}\" at position ${start}.`);    // no functions right now\r\n                }\r\n            }\r\n        }\r\n\r\n        while(ops.length > 0) {\r\n            stack.push(<INode>ops.pop());   // add the remaining operators\r\n        }\r\n\r\n        return [stack, steps + 1];\r\n    }\r\n\r\n    parse(): INode {\r\n        let postFixStack = this.buildStack(this.tokens)[0];\r\n        return this.createTree(postFixStack);\r\n    }\r\n}\r\n\r\n\r\nexport default Parser;","class Token {\r\n    \r\n    private _type : TokenType;\r\n    public get type() : TokenType {\r\n        return this._type;\r\n    }\r\n    \r\n    private _value : string;\r\n    public get value() : string {\r\n        return this._value;\r\n    }\r\n    \r\n    constructor(type: TokenType, value: string) {\r\n        this._type = type;\r\n        this._value = value;\r\n    }\r\n}\r\n\r\nenum TokenType {\r\n    Variable = 0,\r\n    Character = 1,\r\n    LParen = 2,\r\n    RParen = 3,\r\n    Operator = 4,\r\n    Comma = 5,\r\n    Default = 6\r\n}\r\n\r\ninterface ITokenizer {\r\n    tokenize(): Token[];\r\n}\r\n\r\nclass Tokenizer implements ITokenizer {\r\n    private formula: string;\r\n\r\n    private operators: { [id:string]: string } = {\r\n        '+': 'add',\r\n        '-': 'sub',\r\n        '*': 'mul',\r\n        '/': 'div'\r\n    };\r\n\r\n    private checkType(c: string): TokenType {\r\n        if(c >= '0' && c <= '9' || c == '.') {\r\n            return TokenType.Variable;\r\n        }\r\n        else if(c == '(') {\r\n            return TokenType.LParen;\r\n        }\r\n        else if(c == ')'){\r\n            return TokenType.RParen;\r\n        }\r\n        else if(this.operators[c]) {\r\n            return TokenType.Operator;\r\n        }\r\n        else if(c >= 'a' && c <= 'z') {\r\n            return TokenType.Character;\r\n        }\r\n        else if(c == ',') {\r\n            return TokenType.Comma;\r\n        }\r\n\r\n        return TokenType.Default;\r\n    }\r\n\r\n    constructor(formula: string) {\r\n        this.formula = formula.trim();\r\n    }\r\n\r\n    tokenize(): Token[] {\r\n        let retval: Token[] = [];\r\n\r\n        let cType = TokenType.Default;\r\n        let cVal = '';\r\n\r\n        let divided = this.formula.split('');\r\n\r\n        divided.forEach((x, i) => {\r\n            if(cVal === '') {\r\n                cVal = x;\r\n                cType = this.checkType(x);\r\n\r\n                if(this.formula.length == 1) {\r\n                    retval.push(new Token(cType, cVal));   // our only token\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            if(x === ' ')\r\n                return;\r\n\r\n            if(cVal == '-' && this.checkType(x) == TokenType.Variable && (!divided[i-2] || (divided[i-2] && this.checkType(divided[i - 2]) != TokenType.Variable))) {\r\n                cType = TokenType.Variable;    // this is now a number :)\r\n            }\r\n\r\n            if(cType == this.checkType(x)) { // we're still not past the current token\r\n\r\n                if(cType == TokenType.Variable && (x == '.' && cVal.endsWith('.'))) {  // floating point numbers must be of the format NUMBER.NUMBER\r\n                    throw new Error(`Invalid '.' after token \"${cVal}\"`);\r\n                } \r\n                else if(cType == TokenType.LParen || cType == TokenType.RParen) {\r\n                    // add the previous token and clear it up then\r\n                    retval.push(new Token(cType, cVal));\r\n                    cVal = '';\r\n                }\r\n                else if(cType == TokenType.Operator && x == '-') {\r\n                    let token = new Token(cType, cVal);\r\n                    retval.push(token);\r\n\r\n                    cType = TokenType.Variable;\r\n                    cVal = '';\r\n                }\r\n\r\n                cVal += x;  // keep on building the current token\r\n            }\r\n            else { // the current token is done start creating the new one\r\n                let token = new Token(cType, cVal);\r\n                retval.push(token);\r\n\r\n                cType = this.checkType(x);\r\n                cVal = x;\r\n\r\n                // check validity\r\n                if(cType != TokenType.LParen && retval[retval.length - 1].type == TokenType.Character) {     // after a function we expect a '('\r\n                    throw new Error(`Invalid token ${cVal} after function \"${retval[retval.length - 1].value}\"`);\r\n                }\r\n            }\r\n            if(i == this.formula.length - 1) {\r\n                let lastToken = new Token(cType, cVal);\r\n                retval.push(lastToken);\r\n            }\r\n        });\r\n        \r\n        return retval;\r\n    };\r\n}\r\n\r\nexport {Tokenizer, TokenType, Token}","\r\nimport { ITextInput } from \"../components/base/baseTextInput\";\r\nimport CalculatorInput from \"../components/calcInput\";\r\nimport NumericInput from '../components/numericInput';\r\n\r\nlet calc = new CalculatorInput(document.getElementById('calculator-div') as HTMLElement);\r\nlet numeric = new NumericInput(document.getElementById('numeric-div') as HTMLElement);\r\n\r\nfunction textChanged(x: ITextInput) {\r\n    console.log(`${x.hostElement.id} text has been set to ${x.text}`);\r\n}\r\n\r\nfunction validityChanged(x: ITextInput) {\r\n    console.log(`${x.hostElement.id} validity has been set to ${x.isValid}`);\r\n}\r\n\r\nfunction valueChanged(x: ITextInput) {\r\n    console.log(`${x.hostElement.id} value has been set to ${x.value}`);\r\n}\r\n\r\ncalc.textChanged?.subscribe(textChanged);\r\ncalc.textChanged?.subscribe(x => {\r\n    let item = document.getElementById('textId');\r\n    if(item) {\r\n        item.innerText = x.text;\r\n    }\r\n});\r\n\r\ncalc.validityChanged?.subscribe(validityChanged);\r\ncalc.validityChanged?.subscribe(x => {\r\n    let item = document.getElementById('validId');\r\n    if(item) {\r\n        item.innerText = x.isValid.toString();\r\n    }\r\n});\r\n\r\ncalc.valueChanged?.subscribe(valueChanged);\r\ncalc.valueChanged?.subscribe(x => {\r\n    let span = document.getElementById('valueId');\r\n    if(span) {\r\n        let val = NaN;\r\n        if(x.value != undefined) {\r\n            val = x.value;\r\n        }\r\n        span.innerText = val.toFixed(4);\r\n    }\r\n});\r\n\r\nnumeric.textChanged?.subscribe(textChanged);\r\nnumeric.textChanged?.subscribe(x => {\r\n    let span = document.getElementById('textIdNumeric');\r\n    if(span) {\r\n        span.innerText = x.text;\r\n    }\r\n});\r\n\r\nnumeric.valueChanged?.subscribe(valueChanged);\r\nnumeric.valueChanged?.subscribe(x => {\r\n    let span = document.getElementById('valueIdNumeric');\r\n    if(span) {\r\n        span.innerText = <string>x.value?.toString();   // this is supposed to be NaN if something's wrong\r\n    }\r\n});\r\n\r\nnumeric.validityChanged?.subscribe(validityChanged);\r\nnumeric.validityChanged?.subscribe(x => {\r\n    let span = document.getElementById('validIdNumeric');\r\n    if(span) {\r\n        span.innerText = x.isValid.toString();\r\n    }\r\n});\r\n\r\nlet valBtn = document.getElementById('setValBtn');\r\nlet txtBtn = document.getElementById('setTextBtn');\r\n\r\nif(valBtn) {\r\n    valBtn.onclick = _ => {\r\n        let val = document.getElementById('inputValue') as HTMLInputElement;\r\n        if(val) {\r\n            let calcVal = val.value.length > 0 ? val.value : undefined;\r\n            calc.value = Number(calcVal);\r\n        }\r\n    };\r\n}\r\n\r\nif(txtBtn) {\r\n    txtBtn.onclick = _ => {\r\n        let txt = document.getElementById('inputText') as HTMLInputElement;\r\n        if(txt) {\r\n            calc.text = txt.value;\r\n        }\r\n    };\r\n}\r\n\r\nlet nValBtn = document.getElementById('setValBtnNumeric');\r\nlet nTxtBtn = document.getElementById('setTextBtnNumeric');\r\n\r\nif(nValBtn) {\r\n    nValBtn.onclick = _ => {\r\n        let val = document.getElementById('inputValueNumeric') as HTMLInputElement;\r\n        if(val) {\r\n            let numVal = val.value.length > 0 ? val.value : undefined;\r\n            numeric.value = Number(numVal);\r\n        }\r\n    };\r\n}\r\n\r\nif(nTxtBtn) {\r\n    nTxtBtn.onclick = _ => {\r\n        let txt = document.getElementById('inputTextNumeric') as HTMLInputElement;\r\n        if(txt) {\r\n            numeric.text = txt.value;\r\n        }\r\n    };\r\n}\r\n\r\nlet destroyBtn = document.getElementById('destroyBtn') as HTMLButtonElement;\r\nif(destroyBtn) {\r\n    destroyBtn.onclick = _ => {\r\n        numeric.destroy();\r\n        calc.destroy();\r\n\r\n        // clear up the divs as well\r\n        document.getElementById('calcInputDiv')?.remove();\r\n        document.getElementById('numericInputDiv')?.remove();\r\n    };\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./typescript/index.ts\");\n"],"sourceRoot":""}